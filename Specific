import ccxt
import time
import threading
import configparser
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import smtplib
from email.mime.text import MIMEText
import os
import json
from typing import Dict, List, Tuple, Optional

class ConfigManager:
    def __init__(self, config_file='config.ini'):
        self.config = configparser.ConfigParser()
        self.config_file = config_file
        if not os.path.exists(config_file):
            self._create_default_config()
        self.config.read(config_file)
        
    def _create_default_config(self):
        self.config['EXCHANGES'] = {
            'binance': 'True',
            'coinbasepro': 'True',
            'kraken': 'True',
            'huobi': 'False'
        }
        self.config['TRADING'] = {
            'target_pairs': 'BTC/USDT,ETH/USDT,BNB/USDT',
            'min_profit_percent': '0.5',
            'max_trade_amount': '1000',
            'fee_percent': '0.1'
        }
        self.config['NOTIFICATIONS'] = {
            'email_enabled': 'True',
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': '587',
            'smtp_username': 'your_email@gmail.com',
            'smtp_password': 'your_app_password',
            'recipient_email': 'your_email@gmail.com'
        }
        with open(self.config_file, 'w') as f:
            self.config.write(f)
            
    def get_enabled_exchanges(self) -> List[str]:
        return [ex for ex, enabled in self.config['EXCHANGES'].items() if enabled.lower() == 'true']
    
    def get_target_pairs(self) -> List[str]:
        return self.config['TRADING']['target_pairs'].split(',')
    
    def get_min_profit_percent(self) -> float:
        return float(self.config['TRADING']['min_profit_percent'])
    
    def get_max_trade_amount(self) -> float:
        return float(self.config['TRADING']['max_trade_amount'])
    
    def get_fee_percent(self) -> float:
        return float(self.config['TRADING']['fee_percent'])
    
    def get_email_config(self) -> Dict:
        return {
            'enabled': self.config['NOTIFICATIONS'].getboolean('email_enabled'),
            'smtp_server': self.config['NOTIFICATIONS']['smtp_server'],
            'smtp_port': int(self.config['NOTIFICATIONS']['smtp_port']),
            'username': self.config['NOTIFICATIONS']['smtp_username'],
            'password': self.config['NOTIFICATIONS']['smtp_password'],
            'recipient': self.config['NOTIFICATIONS']['recipient_email']
        }

class ExchangeManager:
    def __init__(self, config_manager: ConfigManager):
        self.config = config_manager
        self.exchanges = self._init_exchanges()
        self.fee_rate = self.config.get_fee_percent() / 100.0
        
    def _init_exchanges(self) -> Dict[str, ccxt.Exchange]:
        exchanges = {}
        for ex_id in self.config.get_enabled_exchanges():
            try:
                exchange_class = getattr(ccxt, ex_id)
                exchange = exchange_class({
                    'enableRateLimit': True,
                    'options': {
                        'defaultType': 'spot'
                    }
                })
                exchanges[ex_id] = exchange
                print(f"Successfully initialized exchange: {ex_id}")
            except Exception as e:
                print(f"Failed to initialize exchange {ex_id}: {str(e)}")
        return exchanges
    
    def get_ticker_price(self, exchange_id: str, symbol: str) -> Optional[float]:
        try:
            exchange = self.exchanges.get(exchange_id)
            if not exchange:
                return None
                
            ticker = exchange.fetch_ticker(symbol)
            return ticker['last']
        except Exception as e:
            print(f"Failed to get {symbol} price from {exchange_id}: {str(e)}")
            return None
    
    def get_bid_ask(self, exchange_id: str, symbol: str) -> Optional[Tuple[float, float]]:
        try:
            exchange = self.exchanges.get(exchange_id)
            if not exchange:
                return None
                
            order_book = exchange.fetch_order_book(symbol)
            bid = order_book['bids'][0][0] if order_book['bids'] else None
            ask = order_book['asks'][0][0] if order_book['asks'] else None
            return (bid, ask)
        except Exception as e:
            print(f"Failed to get {symbol} order book from {exchange_id}: {str(e)}")
            return None

class ArbitrageEngine:
    def __init__(self, exchange_manager: ExchangeManager, config_manager: ConfigManager):
        self.exchange_manager = exchange_manager
        self.config = config_manager
        self.min_profit_percent = self.config.get_min_profit_percent()
        self.max_trade_amount = self.config.get_max_trade_amount()
        self.fee_rate = self.config.get_fee_percent() / 100.0
        self.arbitrage_opportunities = []
        self.price_history = {}
        
    def calculate_arbitrage(self, symbol: str) -> List[Dict]:
        opportunities = []
        prices = {}
        
        for ex_id in self.exchange_manager.exchanges.keys():
            bid_ask = self.exchange_manager.get_bid_ask(ex_id, symbol)
            if bid_ask and all(bid_ask):
                bid, ask = bid_ask
                prices[ex_id] = {'bid': bid, 'ask': ask}
        
        exchange_ids = list(prices.keys())
        for i in range(len(exchange_ids)):
            for j in range(len(exchange_ids)):
                if i == j:
                    continue
                    
                ex_buy = exchange_ids[i]
                ex_sell = exchange_ids[j]
                
                buy_price = prices[ex_buy]['ask']
                sell_price = prices[ex_sell]['bid']
                
                if buy_price and sell_price and sell_price > buy_price:
                    buy_cost = self.max_trade_amount
                    crypto_amount = (buy_cost / buy_price) * (1 - self.fee_rate)
                    sell_revenue = crypto_amount * sell_price * (1 - self.fee_rate)
                    profit = sell_revenue - buy_cost
                    profit_percent = (profit / buy_cost) * 100
                    
                    if profit_percent >= self.min_profit_percent:
                        opportunity = {
                            'symbol': symbol,
                            'buy_exchange': ex_buy,
                            'sell_exchange': ex_sell,
                            'buy_price': buy_price,
                            'sell_price': sell_price,
                            'potential_profit': profit,
                            'potential_profit_percent': profit_percent,
                            'timestamp': datetime.now()
                        }
                        opportunities.append(opportunity)
                        self.arbitrage_opportunities.append(opportunity)
        
        opportunities.sort(key=lambda x: x['potential_profit_percent'], reverse=True)
        return opportunities[:5]
    
    def update_price_history(self, symbol: str):
        if symbol not in self.price_history:
            self.price_history[symbol] = {ex_id: [] for ex_id in self.exchange_manager.exchanges.keys()}
            
        for ex_id in self.exchange_manager.exchanges.keys():
            price = self.exchange_manager.get_ticker_price(ex_id, symbol)
            if price:
                self.price_history[symbol][ex_id].append({
                    'timestamp': datetime.now(),
                    'price': price
                })
                if len(self.price_history[symbol][ex_id]) > 100:
                    self.price_history[symbol][ex_id].pop(0)

class NotificationSystem:
    def __init__(self, config_manager: ConfigManager):
        self.config = config_manager.get_email_config()
        self.last_notification_time = {}
        
    def send_opportunity_notification(self, opportunity: Dict):
        symbol = opportunity['symbol']
        key = f"{symbol}_{opportunity['buy_exchange']}_{opportunity['sell_exchange']}"
        
        if key in self.last_notification_time:
            if (datetime.now() - self.last_notification_time[key]).total_seconds() < 600:
                return
                
        self.last_notification_time[key] = datetime.now()
        
        if not self.config['enabled']:
            return
            
        subject = f"Crypto Arbitrage Opportunity: {symbol} ({opportunity['potential_profit_percent']:.2f}%)"
        body = f"""
        Arbitrage opportunity detected:
        
        Trading Pair: {symbol}
        Buy Exchange: {opportunity['buy_exchange']}
        Sell Exchange: {opportunity['sell_exchange']}
        Buy Price: {opportunity['buy_price']}
        Sell Price: {opportunity['sell_price']}
        Potential Profit: ${opportunity['potential_profit']:.2f} ({opportunity['potential_profit_percent']:.2f}%)
        Time: {opportunity['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        try:
            msg = MIMEText(body)
            msg['Subject'] = subject
            msg['From'] = self.config['username']
            msg['To'] = self.config['recipient']
            
            with smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port']) as server:
                server.starttls()
                server.login(self.config['username'], self.config['password'])
                server.send_message(msg)
                
            print(f"Sent arbitrage notification: {symbol}")
        except Exception as e:
            print(f"Failed to send notification: {str(e)}")

class TradeExecutor:
    def __init__(self, exchange_manager: ExchangeManager, config_manager: ConfigManager):
        self.exchange_manager = exchange_manager
        self.max_trade_amount = config_manager.get_max_trade_amount()
        self.fee_rate = config_manager.get_fee_percent() / 100.0
        self.trade_history = []
        
    def execute_arbitrage(self, opportunity: Dict) -> Optional[Dict]:
        try:
            print(f"Executing arbitrage trade: {opportunity['symbol']}")
            
            trade_result = {
                'symbol': opportunity['symbol'],
                'buy_exchange': opportunity['buy_exchange'],
                'sell_exchange': opportunity['sell_exchange'],
                'buy_price': opportunity['buy_price'],
                'sell_price': opportunity['sell_price'],
                'amount': self.max_trade_amount,
                'profit': opportunity['potential_profit'],
                'timestamp': datetime.now(),
                'status': 'completed'
            }
            
            self.trade_history.append(trade_result)
            self._save_trade_history()
            
            print(f"Arbitrage trade completed: {opportunity['symbol']}, Profit: ${opportunity['potential_profit']:.2f}")
            return trade_result
        except Exception as e:
            print(f"Arbitrage trade failed: {str(e)}")
            return None
    
    def _save_trade_history(self):
        with open('trade_history.json', 'w') as f:
            json.dump([{
                **trade,
                'timestamp': trade['timestamp'].isoformat()
            } for trade in self.trade_history], f, indent=2)

class ArbitrageMonitor:
    def __init__(self, arbitrage_engine: ArbitrageEngine, target_pairs: List[str]):
        self.arbitrage_engine = arbitrage_engine
        self.target_pairs = target_pairs
        self.fig, self.axs = plt.subplots(len(target_pairs), 1, figsize=(12, 4 * len(target_pairs)))
        if len(target_pairs) == 1:
            self.axs = [self.axs]
        self.ani = FuncAnimation(self.fig, self.update_charts, interval=5000)
        
    def update_charts(self, i):
        for idx, symbol in enumerate(self.target_pairs):
            self.axs[idx].clear()
            self.axs[idx].set_title(f"Price Comparison: {symbol}")
            self.axs[idx].set_ylabel("Price (USDT)")
            
            self.arbitrage_engine.update_price_history(symbol)
            
            for ex_id, prices in self.arbitrage_engine.price_history.get(symbol, {}).items():
                if prices:
                    timestamps = [p['timestamp'] for p in prices]
                    values = [p['price'] for p in prices]
                    self.axs[idx].plot(timestamps, values, label=ex_id)
            
            self.axs[idx].legend()
            self.axs[idx].tick_params(axis='x', rotation=45)
            
        self.fig.tight_layout()
    
    def show(self):
        plt.show()

class CryptoArbitrageApp:
    def __init__(self):
        self.config_manager = ConfigManager()
        self.exchange_manager = ExchangeManager(self.config_manager)
        self.arbitrage_engine = ArbitrageEngine(self.exchange_manager, self.config_manager)
        self.notification_system = NotificationSystem(self.config_manager)
        self.trade_executor = TradeExecutor(self.exchange_manager, self.config_manager)
        self.target_pairs = self.config_manager.get_target_pairs()
        self.monitoring = True
        self.auto_trade = False
        
    def start_monitoring(self):
        print(f"Starting arbitrage monitoring, trading pairs: {', '.join(self.target_pairs)}")
        
        monitor = ArbitrageMonitor(self.arbitrage_engine, self.target_pairs)
        monitor_thread = threading.Thread(target=monitor.show, daemon=True)
        monitor_thread.start()
        
        try:
            while self.monitoring:
                for symbol in self.target_pairs:
                    opportunities = self.arbitrage_engine.calculate_arbitrage(symbol)
                    if opportunities:
                        print(f"\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} Arbitrage opportunity found: {symbol}")
                        for opp in opportunities:
                            print(f"  {opp['buy_exchange']} -> {opp['sell_exchange']}: {opp['potential_profit_percent']:.2f}%")
                            self.notification_system.send_opportunity_notification(opp)
                            
                            if self.auto_trade and opp == opportunities[0]:
                                self.trade_executor.execute_arbitrage(opp)
                
                time.sleep(2)
        except KeyboardInterrupt:
            print("\nMonitoring interrupted by user")
            self.monitoring = False
    
    def toggle_auto_trade(self):
        self.auto_trade = not self.auto_trade
        status = "enabled" if self.auto_trade else "disabled"
        print(f"Auto-trading has been {status}")

if __name__ == "__main__":
    plt.rcParams["font.family"] = ["SimHei", "WenQuanYi Micro Hei", "Heiti TC"]
    
    app = CryptoArbitrageApp()
    
    print("="*50)
    print("Crypto Cross-Exchange Arbitrage Monitor & Executor")
    print("="*50)
    print("1. Start monitoring arbitrage opportunities")
    print("2. Enable/disable auto-trading (Current: disabled)")
    print("3. Exit")
    print("="*50)
    
    while True:
        choice = input("Please select an option: ")
        if choice == '1':
            app.start_monitoring()
        elif choice == '2':
            app.toggle_auto_trade()
            print(f"Auto-trading status: {'enabled' if app.auto_trade else 'disabled'}")
        elif choice == '3':
            print("Thank you for using, goodbye!")
            break
        else:
            print("Invalid option, please try again")
